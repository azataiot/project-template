name: Code Quality

on:
  pull_request:
    branches: [ 'main', 'dev' ]
    types:
      - opened
    paths-ignore:
      - 'docs/**'
  workflow_dispatch:
    if: github.actor != 'dependabot[bot]'

permissions:
  contents: read

jobs:
  linting:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip' # caching pip dependencies
      - uses: pre-commit/action@v3.0.0

  testing:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      - name: Install poetry
        uses: abatilo/actions-poetry@v2
      - name: Setup a local virtual environment (if no poetry.toml file)
        run: |
          poetry config virtualenvs.create true --local
          poetry config virtualenvs.in-project true --local
      - uses: actions/cache@v3
        name: Define a cache for the virtual environment based on the dependencies lock file
        with:
          path: ./.venv
          key: venv-${{ hashFiles('poetry.lock') }}
      - name: Install the project dependencies
        run: poetry install
      - name: Run the automated tests
        run: poetry run python -m pytest
      - name: Run the django checks
        run: poetry run appapp/manage.py check
      - name: Run the django tests
        run: poetry run appapp/manage.py test

  #  Is this working properly?
  versioning:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Get version from the coming branch's pyproject.toml
        run: |
          echo "COMING_VERSION=$(grep '^version =' pyproject.toml | awk -F\" '{print $2}')" >> $GITHUB_ENV

      - name: Get main branch version
        run: |
          git fetch origin main:main
          git checkout main
          echo "MAIN_VERSION=$(grep '^version =' pyproject.toml | awk -F\" '{print $2}')" >> $GITHUB_ENV

      - name: Check versions
        run: |
          if [ "$COMING_VERSION" == "$MAIN_VERSION" ]; then
            echo "Error: The version in the branch is the same as the main branch. Please update the version in pyproject.toml."
            exit 1
          fi
